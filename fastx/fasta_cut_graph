#!/usr/bin/env python
#
#  Split ("cut") a fasta file in to smaller pieces based various criteria (e.g., hard or soft masking)
# 
# File:	fasta_cut
# Author:	Conrad Stack
# Email:	conrad.stack@gmail.com
# --------------------------------------------



# NOTES:
# For simulated contigs, where there is no chance of overlapping  
# vector screens, the different in size between the cut 
# contigs and the pre-cut contigs divided by 20 (or whatever the 
# vector length is) should be equal to the difference between 
# the number of cut contigs minus the number of pre-cut contigs:
# > ( $(count_bps test_cut.fa) - $(count_bps test.fa) ) / 20 == \
#	( $(count_seqs test_cut.fa) - $(count_seqs test.fa) )

# - The "conjoined_size" edge attribute *includes* the size of the gap that formerly joined the two edges.  It doesn't have to work like this 

# -*- coding: utf-8 -*-
from __future__ import unicode_literals

import argparse, sys, re
import pyfaidx
from textwrap import TextWrapper
import networkx as nx


# main() -> parse command line arguments 
#
def main(args):

	if(args.verbose):
		print(args,file=sys.stderr)

	# create a graph as well if needed,
	#  if graphfile argument was not set, effectively ignore the graph object, G
	make_graph = (args.graphfile is not None)
	G=nx.DiGraph()
	curr_node = 0  # ID of the current node 
    
    # objects for matching cut pattern and fasta output
	wrapper = TextWrapper(width=80)
	dnaX = re.compile(args.pattern)
	fasta = pyfaidx.Fasta(args.infile)

	# iterate over all sequences
	for key in fasta.keys():

		if(args.verbose): print(key, file=sys.stderr)

		# find instances of pattern in this sequence
		fastr=fasta[key][:].seq
		test = dnaX.finditer(fastr)
		nsubstr=1 # counter for storing the current substring that is being worked on

		for gg in test:

			(ss,se) = gg.span()
			# print((se-ss))
			frag_name = key + '_frag' + str(nsubstr)
			args.outfile.write('>' + frag_name + '\n')
			wrap_seq = "\n".join(wrapper.wrap( str(fasta[key][ss:se]) ))
			args.outfile.write( wrap_seq + '\n')

			# add new node and edge to graph:
			if(make_graph):
				prev_node = curr_node
				curr_node += 1
				G.add_node( curr_node, label=frag_name, seqname=key, start=(ss+1), end=se, width=(se-ss) )
				if(nsubstr > 1):
					gap_width=G.node[curr_node]['start'] - G.node[prev_node]['end'] - 1
					conjoined_size=G.node[curr_node]['width'] + G.node[prev_node]['width'] + gap_width
					assert conjoined_size == (G.node[curr_node]['end'] - G.node[prev_node]['start'] + 1)
					G.add_edge( prev_node, curr_node, removal_cost=0, gap_width=gap_width, conjoined_size=conjoined_size )

			nsubstr += 1
			# print( str(ss) + " " + str(se))

	# write graph file (if exists)
	if(make_graph):
		nx.write_graphml(G, args.graphfile)


if __name__ == '__main__':

	# process CLI arguments
	parser = argparse.ArgumentParser(description="'Cut' a fasta file based on masks")
	parser.add_argument('infile', metavar='input_file',
		help='file containing one or more sequences in fastA format')
	parser.add_argument('-o','--output',dest='outfile', metavar='output_file',
		nargs='?', type=argparse.FileType('w'), default=sys.stdout,
		help='file to write the split fasta parts to')
	parser.add_argument('-g','--graph',dest='graphfile', metavar='graph_file',
		nargs='?', type=str, 
		help='filename to write the (graphml-formatted) sequence graph to')	
	parser.add_argument('-v','--verbose',dest='verbose',
		action='store_true')
	parser.add_argument('-p','--pattern',dest='pattern', 
		action='store',
		default="[^Xx]+",type=str,
		help="(experimental) pattern that matches the sequence to KEEP (the inverse of this pattern are the sites the sequence is cut at)")
	parser.add_argument('-m','--minlen',dest='minlen', 
		nargs=1, action='store', type=int,
		default=0,
		help="(NOT IMPLEMENTED) Specify the minimum length of a pattern match to split on. Otherwise, ignore the match")
	
	# TODO 
	args = parser.parse_args()

	#args = parser.parse_args(['-o', '/Users/miamimac2/tmp/test_cut.fa','/Users/miamimac2/tmp/test.fa'])
	main(args)



# Acknowledgements:
# --------------------------------------------
# TextWrapper code from the following stackoverflow thread:
# - https://stackoverflow.com/questions/15666990/how-would-one-limit-characters-per-line-when-printing-a-raw-input-to-a-text-file
