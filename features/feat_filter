#!/usr/bin/env python
#

#  Filter out features (in gff or bed files) by length
#  (boilerplate code from https://gist.github.com/opie4624/3896526)
#
#   NOTES:
#   - The call to the subprocess module here might only be valid for python v3.5+
#

# import modules used here -- sys is a very standard one
import sys, argparse, logging
import os.path, subprocess, shlex

# Gather our code in a main() function
def main(args, loglevel):
  logging.basicConfig(format="%(levelname)s: %(message)s", level=loglevel)
 
  # Check whether infile exists:
  # nb -> This check would partially mitigate need to use shlex.quote() command below to prevent command injection - not that its a major concern here 
  # 
  if(not os.path.exists(args.infile)):
      out_msg = (args.infile + " does not exist")
      print(out_msg)
      exit(1)

  # /DEBUG
  logging.debug("You passed an argument.")
  logging.debug("Your Argument: %s" % args)


  # format the command string and execute in shell
  file_format = 'bed' if args.bed else 'gff'
  cmd_str = "bioawk -c %s '($end - $start) > %d' %s" % (file_format, args.minwidth, shlex.quote(args.infile) )
  subprocess.run(cmd_str,stdout=args.outfile,shell=True)


# Standard boilerplate to call the main() function
if __name__ == '__main__':
  parser = argparse.ArgumentParser( 
                                    description = "Filter out features (in gff or bed files) by length",
                                    epilog = "As an alternative to the commandline, params can be placed in a file, one per line, and specified on the commandline like '%(prog)s @params.conf'.",
                                    fromfile_prefix_chars = '@' )

  parser.add_argument(
                      "infile",
                      help = "a table in gff or bed (must use -b) format that contains the features to be filtered",
                      metavar = "ARG")
  parser.add_argument(
                      "-b",
                      "--bed",
                      help="Assume the input file is in bed format",
                      action="store_true",default=False)
  parser.add_argument(
                      "-o",
                      "--outfile",
                      help="A file where the output should be sent (defaults to stdout)",
                      type=argparse.FileType('w'),
                      default=sys.stdout)
  parser.add_argument(
                      "-l",
                      "--minwidth",
                      help="Minimum width of features to keep",
                      type=int,default=0)
  parser.add_argument(
                      "-v",
                      "--verbose",
                      help="increase output verbosity",
                      action="store_true")
  args = parser.parse_args()
  
  # Setup logging
  if args.verbose:
    loglevel = logging.DEBUG
  else:
    loglevel = logging.INFO
  
  main(args, loglevel)




